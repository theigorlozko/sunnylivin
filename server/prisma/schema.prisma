generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Role {
  BUYER
  VENDOR
  ADMIN
}

enum ShopPlan {
  SEED    // €4.99/month
  GROWTH  // €9.99/month
  BLOOM   // €14.99/month
}

enum ProductCategory {
  Milk
  Eggs
  Cheese
  Vegetables
  Fruits
  Honey
  BakedGoods
  Meat
  Fish
  Jam
  Juice
  Kombucha
  Tea
  Coffee
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] @relation("ProductTags")
}

enum ShopHighlight {
  Organic
  FreeRange
  LocallySourced
  FamilyOwned
  Seasonal
  SmallBatch
  HandCrafted
  Sustainable
  WomanOwned
  ZeroWaste
}

model User {
  id          Int           @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String        @unique
  password    String?
  phoneNumber String?
  role        Role          @default(BUYER)
  createdAt   DateTime      @default(now())

  vendorShops VendorShop[]
  reviews     Review[]
  favorites   VendorShop[]  @relation("UserFavorites")
  featuredPayments FeaturedPayment[]
}

model VendorShop {
  id                Int               @id @default(autoincrement())
  name              String
  description       String
  photoUrls         String[]
  highlights        ShopHighlight[]
  categories        ProductCategory[]
  isParkingIncluded Boolean           @default(false)
  plan              ShopPlan          @default(SEED)
  averageRating     Float?            @default(0)
  numberOfReviews   Int?              @default(0)
  isFeatured        Boolean           @default(false)
  featuredUntil     DateTime?
  slug              String            @unique
  createdAt         DateTime          @default(now())
  vendorShopType    VendorShopType

  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  locationId        Int
  location          Location          @relation(fields: [locationId], references: [id])

  products          Product[]
  reviews           Review[]
  favoritedBy       User[]            @relation("UserFavorites")
  featuredPayments  FeaturedPayment[]
}

model Product {
  id                  Int      @id @default(autoincrement())
  vendorShopId        Int
  name                String
  description         String
  price               Float
  unit                String
  category            ProductCategory
  subcategory         String?
  tags                Tag[] @relation("ProductTags")
  photoUrl            String?
  isAvailable         Boolean @default(true)
  externalPurchaseUrl String?
  createdAt           DateTime @default(now())

  vendorShop          VendorShop @relation(fields: [vendorShopId], references: [id])
}

model Location {
  id          Int     @id @default(autoincrement())
  address     String
  city        String
  country     String
  postalCode  String
  coordinates Unsupported("geography(Point, 4326)")

  vendorShops VendorShop[]
}

model Review {
  id           Int      @id @default(autoincrement())
  userId       Int
  vendorShopId Int
  rating       Int
  comment      String
  createdAt    DateTime @default(now())

  user         User      @relation(fields: [userId], references: [id])
  vendorShop   VendorShop @relation(fields: [vendorShopId], references: [id])
}

model FeaturedPayment {
  id            Int      @id @default(autoincrement())
  vendorShopId  Int
  userId        Int
  amount        Float
  paidAt        DateTime @default(now())
  expiresAt     DateTime

  vendorShop    VendorShop @relation(fields: [vendorShopId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

enum VendorShopType {
  Farm
  Bakery
  Dairy
  Fishery
  Butchery
  Orchard
  Beekeeper
  Other
}